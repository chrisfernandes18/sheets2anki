name: Create sheets2Anki Release
on:
  push:
    # Only run this workflow when changes are made to the specified paths
    # This will ensure that the workflow only runs when changes are made to remote_decks/ or __init__.py
    paths:
      - remote_decks/**
      - __init__.py
      - config.json
      - meta.json
    # Trigger the workflow on pushes to the main branch
    branches:
      - main

  workflow_dispatch:
    inputs:
      bump:
        description: "Semver bump (major|minor|patch). Ignored if continuing same beta train"
        required: false
        default: "patch"
      preid:
        description: "Prerelease identifier"
        required: false
        default: "beta"

permissions:
  contents: write

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # we need tags

      - name: Validate required files exist
        run: |
          missing=0
          for path in "__init__.py" "config.json" "meta.json" "remote_decks"; do
            if [ ! -e "$path" ]; then
              echo "::error::Required path '$path' not found"
              missing=1
            fi
          done
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi

      - name: Create Anki add-on archive
        run: |
          zip -r sheets2Anki.ankiaddon __init__.py config.json meta.json remote_decks

      - name: Determine next beta tag
        id: version
        env:
          INPUT_BUMP: ${{ github.event.inputs.bump || 'patch' }}
          INPUT_PREID: ${{ github.event.inputs.preid || 'beta' }}
        run: |
          set -euo pipefail

          # Find latest tag (if any)
          latest_tag="$(git tag --list 'v*' --sort=-v:refname | head -n1 || true)"
          echo "Latest tag: ${latest_tag:-<none>}"

          bump="$INPUT_BUMP"
          preid="$INPUT_PREID"

          next_tag=""
          if [[ -z "$latest_tag" ]]; then
            # No tags yet: start at v0.1.0-${preid}.0
            next_tag="v0.1.0-${preid}.0"
          else
            # Parse semver: vMAJ.MIN.PATCH[-preid.NUM]
            if [[ "$latest_tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-([A-Za-z0-9]+)\.([0-9]+))?$ ]]; then
              MAJ="${BASH_REMATCH[1]}"
              MIN="${BASH_REMATCH[2]}"
              PAT="${BASH_REMATCH[3]}"
              PRE_ALL="${BASH_REMATCH[4]}"
              PRE_NAME="${BASH_REMATCH[5]}"
              PRE_NUM="${BASH_REMATCH[6]}"

              if [[ -n "$PRE_ALL" && "$PRE_NAME" == "$preid" ]]; then
                # Continue same pre-release train: bump pre number
                PRE_NUM=$((PRE_NUM + 1))
                next_tag="v${MAJ}.${MIN}.${PAT}-${preid}.${PRE_NUM}"
              else
                # Start a new pre-release from a (possibly stable) base by semver bump
                case "$bump" in
                  major)
                    MAJ=$((MAJ + 1)); MIN=0; PAT=0;;
                  minor)
                    MIN=$((MIN + 1)); PAT=0;;
                  patch|*)
                    PAT=$((PAT + 1));;
                esac
                next_tag="v${MAJ}.${MIN}.${PAT}-${preid}.0"
              fi
            else
              echo "::warning::Latest tag not semver; defaulting to v0.1.0-${preid}.0"
              next_tag="v0.1.0-${preid}.0"
            fi
          fi

          echo "Computed next tag: $next_tag"
          echo "tag=$next_tag" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        run: |
          tag="${{ steps.version.outputs.tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$tag" -m "Automated beta pre-release $tag"
          git push origin "$tag"

      - name: Create GitHub pre-release and upload asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.tag }}
          prerelease: true
          generate_release_notes: true
          files: |
            sheets2Anki.ankiaddon
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output summary
        run: |
          echo "Created pre-release: ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Asset: sheets2Anki.ankiaddon" >> $GITHUB_STEP_SUMMARY
